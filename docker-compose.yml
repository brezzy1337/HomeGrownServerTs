version: "3.8"
services: 
  postgres:
    image: postgres:16.1-alpine3.19
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # volumes: 
    #   - postgres-data:/var/lib/postgresql/data
    command: >
      bash -c "
        while ! pg_isready -U postgres; do sleep 1; done;
        psql -U postgres -c 'ALTER USER postgres CREATEDB;'"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  server:
    build:
      context: .
      dockerfile: Dockerfile.dev 
    container_name: homegrown-server
    env_file:
     - .env
    ports:
      - "3000:3000"
    depends_on:
      - postgres

  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5845:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD : ${PGADMIN_PASSWORD}
    depends_on: 
      - postgres
        

#Here are the steps to connect to your PostgreSQL database from pgAdmin:

# Start your services with docker-compose up.
# Open a web browser and navigate to http://localhost:5845 (or whatever host and port you've mapped to pgAdmin in your docker-compose file).
# Log in to pgAdmin with the email and password you've specified in the PGADMIN_DEFAULT_EMAIL and PGADMIN_DEFAULT_PASSWORD environment variables.
# Right-click on "Servers" in the left-hand tree, and select "Create > Server...".
# In the "Create - Server" dialog, enter any name for the server.
# Switch to the "Connection" tab.
# In the "Hostname/address" field, enter postgres.
# In the "Username" and "Password" fields, enter the credentials you've specified in the POSTGRES_USER and POSTGRES_PASSWORD environment variables.
# Click "Save".