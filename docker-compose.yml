version: '3.8'
services:
  server:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: homegrown-server
    env_file:
    - .env
    ports:
    - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "ping", "postgres"]
      interval: 1s
      timeout: 5s
      retries: 10
    command: "npm run prisma migrate dev && npm run start:dev"
    networks:
    - homegrown-network
    # ipv4_address: 192.168.1.28

  postgres:
    image: 'postgres:16.1-alpine3.19'
    restart: always
    ports:
    - '5434:5432'
    # user: ${POSTGRES_USER}
    environment:
      # POSTGRES_USER: ${POSTGRES_USER}
      # POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: '121314'
      POSTGRES_DB: 'homegrownprismadb'
    volumes:
    - postgres:/var/lib/postgresql/data
    # bash -c "
    # while ! pg_isready -U postgres; do sleep 1; done;
    healthcheck:
      # test: ['CMD', 'pg_isready', '-d', '${POSTGRES_DB}', -U', '${POSTGRES_USER}', '-p', '5432']
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s

      retries: 10
    # command: >
    #   /bin/sh -c "
    #   until pg_isready -U $$POSTGRES_USER; do sleep 1; done &&
    #   psql -U $$POSTGRES_USER -c 'ALTER USER postgres CREATEDB;' &&
    #   sudo chown $$POSTGRES_USER -R /var/run/postgresql
    #   "
    networks:
    - homegrown-network
    # ipv4_address: 192.168.0.21

  pgadmin:
    image: 'dpage/pgadmin4:latest'
    ports:
    - '5845:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
    - homegrown-network
    # ipv4_address: 192.168.0.22

  #Here are the steps to connect to your PostgreSQL database from pgAdmin:

  # Start your services with docker-compose up.
  # Open a web browser and navigate to http://localhost:5845 (or whatever host and port you've mapped to pgAdmin in your docker-compose file).
  # Log in to pgAdmin with the email and password you've specified in the PGADMIN_DEFAULT_EMAIL and PGADMIN_DEFAULT_PASSWORD environment variables.
  # Right-click on "Servers" in the left-hand tree, and select "Create > Server...".
  # In the "Create - Server" dialog, enter any name for the server.
  # Switch to the "Connection" tab.
  # In the "Username" and "Password" fields, enter the credentials you've specified in the POSTGRES_USER and POSTGRES_PASSWORD environment variables.
  # Click "Save".

  # guacd
  guacd:
    container_name: guacd_compose
    image: guacamole/guacd
    networks:
    - homegrown-network
    restart: always
    volumes:
    - ./drive:/drive:rw
    - ./record:/record:rw

    # postgres_guac
  postgres_guac:
    container_name: postgres_guacamole_compose
    environment:
      PGDATA: /var/lib/postgresql/data/guacamole
      POSTGRES_DB: guacamole_db
      POSTGRES_PASSWORD: 121314
      POSTGRES_USER: guacamole_user
    image: postgres
    networks:
      homegrown-network:
    restart: always
    volumes:
    - ./init:/docker-entrypoint-initdb.d:ro
    - ./data:/var/lib/postgresql/data:rw

  # guacamole
  guacamole:
    container_name: guacamole_compose
    depends_on:
    - guacd
    - postgres_guac
    environment:
      GUACD_HOSTNAME: guacd
      POSTGRES_DATABASE: guacamole_db
      POSTGRES_HOSTNAME: postgres
      POSTGRES_PASSWORD: '121314'
      POSTGRES_USER: guacamole_user
    image: guacamole/guacamole
    links:
    - guacd
    networks:
    - homegrown-network
    ports:
    ##    - 8080:8080/tcp # Guacamole is on :8080/guacamole, not /.
    ## enable next line when using nginx
    - 8080/tcp
    ## enable next line if not using nginx
    restart: always

  # nginx
  nginx:
    container_name: nginx_guacamole_compose
    restart: always
    image: nginx
    volumes:
    - ./nginx/templates:/etc/nginx/templates:ro
    - ./nginx/ssl/self.cert:/etc/nginx/ssl/self.cert:ro
    - ./nginx/ssl/self-ssl.key:/etc/nginx/ssl/self-ssl.key:ro
    ports:
    - 8443:443
    links:
    - guacamole
    networks:
      homegrown-network:

volumes:
  postgres:
    driver: local

networks:
  homegrown-network:
    ipam:
      driver: bridge
      config:
      - subnet: '192.168.1.0/24'
